function [x] = topology_optimization( ...
        nel_x, ...
        nel_y, ...
        volume_fraction, ...
        penalization, ...
        r_min, ...
        senitivity_filter_class, ...
        densign_variable_filter_class, ...
        E_0, ...
        E_min, ...
        nu, ...
        F, ...
        U, ...
        free_dofs, ...
        is_plot, ...
        is_show_iteration_result, ...
        update_method, ...
        is_use_projection_function, ...
        max_iteration_number, ...
        spring_k, ...
        is_spring, ...
        input_element, ...
        output_element ...
    )
    %
    % The Flow For Topology Optimization Based On "Compliance" Objective Function
    %
    % 1. Initialization Stiffness and Matrix
    % 2. Optimization
    % |____ 2.1. Finite Element Method
    % |____ 2.2. Calculate Objective Function Value
    % |____ 2.3. Calculate Sensitivity of The Objective Function Value
    % |____ 2.4. Update Design Variables Using "Optimality Criteria (OC)" or "MMA"
    % |____ 2.5. Plot The Result
    % 3. Return The Final Density Matrix

    % 1. Initialization
    % K = K: stiffness matrix
    % H = filter weight
    [elements_number, k_e, iK, jK] = init_stiffness_matrix(nel_x, nel_y, nu);
    [H, Hs] = init_filter(nel_x, nel_y, r_min);

    x = repmat(volume_fraction, nel_y, nel_x);
    x_filter = x;

    iteration_number = 0;
    volume_fraction_error = 1;
    gray_index = 1;
    beta = 1;

    if update_method == "mma"
        [ ...
             constraint_number, ...
             variable_number, ...
             x_min, ...
             x_max, ...
             x_old_1, ...
             x_old_2, ...
             asymptote_lower_bound, ...
             asymptote_upper_bound, ...
             a_0, ...
             a_i, ...
             c_mma, ...
             d ...
         ] = init_mma_parameters(x, nel_x, nel_y, is_spring);
    end

    % 2. Optimization
    beta_iteration = 1;
    first_objtive_function_value = 1;
    tic;

    while (volume_fraction_error > 0.002 || gray_index > 0.002 || change > 0.01) && (iteration_number < max_iteration_number)
        iteration_number = iteration_number + 1;

        % 2.1. Finite Element Method
        sK = reshape( ...
        k_e(:) * (E_min + x_filter(:)' .^ penalization * (E_0 - E_min)), ...
            64 * nel_x * nel_y, ...
            1 ...
        );
        K = sparse(iK, jK, sK);

        if is_spring
            spring_k_matrix = sparse( ...
                [input_element, output_element], ...
                [input_element, output_element], ...
                spring_k, ...
                size(K, 1), ...
                size(K, 2) ...
            );
            K = K + spring_k_matrix;
        end

        U(free_dofs, :) = K(free_dofs, free_dofs) \ F(free_dofs, :);

        % 2.2. Calculate Objective Function Value
        if is_spring
            U_1 = U(:, 1);
            U_2 = U(:, 2);
            elements_objective_function_value = reshape( ...
                sum((U_2(elements_number) * k_e) .* U_1(elements_number), 2), ...
                nel_y, ...
                nel_x ...
            );

            objective_function_value = U(:, 2)' * K * U(:, 1);

        else
            elements_objective_function_value = reshape( ...
                sum((U(elements_number) * k_e) .* U(elements_number), 2), ...
                nel_y, ...
                nel_x ...
            );

            objective_function_value = sum(sum( ...
                (E_min + x_filter .^ penalization * (E_0 - E_min)) .* elements_objective_function_value ...
            ));
        end

        if iteration_number == 1
            first_objtive_function_value = objective_function_value;
        end

        % 2.3. Calculate Sensitivity of The Objective Function Value
        sensitivity_objective_function_value = -penalization * (E_0 - E_min) * x_filter .^ (penalization - 1) .* elements_objective_function_value;
        sensitivity_volume_fraction = ones(nel_y, nel_x);

        [sensitivity_objective_function_value, sensitivity_volume_fraction] = sensivity_filter( ...
            x, ...
            sensitivity_objective_function_value, ...
            sensitivity_volume_fraction, ...
            H, ...
            Hs, ...
            senitivity_filter_class ...
        );

        % 2.4. Update Design Variables Using "Optimality Criteria (OC)" or "MMA"
        if update_method == "oc"
            [x_filter, x_new] = optimality_criteria(x, nel_x, nel_y, volume_fraction, H, Hs, sensitivity_objective_function_value, sensitivity_volume_fraction, densign_variable_filter_class);

        elseif update_method == "mma"
            if iteration_number < 20
                scale = 1 / first_objtive_function_value;
            else
                scale = 1;
            end

            if is_spring
                constraint_function_value = [scale * objective_function_value; sum(x_filter(:) / (volume_fraction * variable_number)) - 1];
                df_i_dx = [-scale * sensitivity_objective_function_value(:)'; sensitivity_volume_fraction(:)' / (volume_fraction * variable_number)];
                sensitivity_objective_function_value = zeros(variable_number, 1);
            else
                constraint_function_value = sum(x_filter(:) / (volume_fraction * variable_number)) - 1;
                df_i_dx = sensitivity_volume_fraction(:)' / (volume_fraction * variable_number);
            end

            [x_new, ~, ~, ~, ~, ~, ~, ~, ~, asymptote_lower_bound, asymptote_upper_bound] = mma( ...
                constraint_number, ...
                variable_number, ...
                iteration_number, ...
                x(:), ...
                x_min, ...
                x_max, ...
                x_old_1, ...
                x_old_2, ...
                scale * sensitivity_objective_function_value(:), ...
                constraint_function_value, ...
                df_i_dx, ...
                asymptote_lower_bound, ...
                asymptote_upper_bound, ...
                a_0, ...
                a_i, ...
                c_mma, ...
                d, ...
                beta ...
            );

            x_old_2 = x_old_1;
            x_old_1 = x(:);

            x_new = reshape(x_new, nel_y, nel_x);
            x_filter = design_variable_filter(x_new, H, Hs, densign_variable_filter_class);
            x_filter = reshape(x_filter, nel_y, nel_x);
        end

        if is_use_projection_function
            x_new = projection_function(x_new, beta);
        end

        change = max(max(abs(x_new - x)));
        x = x_new;

        gray_index = sum(4 * x(:) .* (1 - x(:))) / length(x(:));
        volume_fraction_error = abs(volume_fraction - mean(x(:)));

        if beta < 512 && (beta_iteration >= 50 || (change <= 0.01 && volume_fraction_error <= 0.001))
            beta = 2 * beta;
            beta_iteration = 0;
            change = 1;
        end

        % 2.5. Plot The Result
        if is_show_iteration_result
            fprintf(' It.:%5i Obj.:%11.4f Vol.:%7.3f gray index.:%7.3f vol error: %7.3f\n', iteration_number, objective_function_value, mean(x(:)), gray_index, volume_fraction_error);
        end

        if is_plot
            colormap(gray);
            imagesc(1 - x_filter);
            caxis([0 1]);
            axis equal;
            axis off;
            drawnow;
        end
    end
end
